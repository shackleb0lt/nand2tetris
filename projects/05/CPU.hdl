// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	ALU(x=D,y=Muxout,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=ALUout,out=outM,zr=zr,ng=ng);
	//ALU
	And(a=instruction[15],b=instruction[3],out=writeM);  //P1

	Mux16(a=A,b=inM,sel=instruction[12],out=Muxout);

	Mux16(a=instruction,b=ALUout,sel=instruction[15],out=Ain);

	//A register
	Not(in=instruction[15],out=Tnot);
	Or(a=instruction[5],b=Tnot,out=Aload);
	ARegister(in=Ain,load=Aload,out=A,out[0..14]=addressM);  

	//D register

	And(a=instruction[15],b=instruction[4],out=Dload);
	DRegister(in=ALUout,load=Dload,out=D);
	
	//load for PC
	And(a=instruction[2],b=instruction[1],out=j1j2);
	And(a=j1j2,b=instruction[0],out=j1j2j3);

	Not(in=zr,out=nzr);
	Not(in=ng,out=nng);
	And(a=instruction[0],b=nzr,out=j3nzr);
	And(a=j3nzr,b=nng,out=j3nzrnng);

	And(a=instruction[1],b=zr,out=j2zr);

	And(a=instruction[2],b=ng,out=j1ng);

	Or(a=j1j2j3,b=j3nzrnng,out=or1);
	Or(a=j2zr,b=j1ng,out=or2);
	Or(a=or1,b=or2,out=or3);

	And(a=instruction[15],b=or3,out=jump);

	Not(in=jump,out=notjump);

	PC(in=A,load=jump,inc=notjump,reset=reset,out[0..14]=pc);

	
}
